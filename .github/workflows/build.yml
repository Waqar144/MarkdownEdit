name: 'Build'

on:
  push:
    branches-ignore:
      - master
    tags-ignore:
      - '*'
  pull_request:
  workflow_dispatch:

jobs:
  build:
    if: ${{ matrix.os }} == "ubuntu-latest"
    env:
      ASAN_FLAGS: "-fsanitize=address -fsanitize=undefined"
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        # Linux:   https://download.qt.io/online/qtsdkrepository/linux_x64/desktop/
        # macOS:   https://download.qt.io/online/qtsdkrepository/mac_x64/desktop/
        # Windows: https://download.qt.io/online/qtsdkrepository/windows_x86/desktop/
        qt-version: ['5.13.2', '5.14.2', '5.15.2']
        experimental: [false]
        exclude:
          # win64_mingw73 not found
          - os: windows-latest
            qt-version: '5.15.0'
        include:
          - os: ubuntu-latest
            qt-version: '6.1.0'
            experimental: true
          - os: windows-latest
            qt-version: '6.1.0'
            experimental: true
    steps:
    - uses: actions/checkout@v2

      #
      # Install Qt
      #

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{ runner.os }}-QtCache-${{ matrix.qt-version }}-2
    # https://github.com/marketplace/actions/install-qt
    - if: contains( matrix.os, 'windows') && ( matrix.qt-version == '5.7' )
      name: Install Qt 5.7 on Windows
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.qt-version }}
        arch: win32_mingw53
        # try mirror
#        mirror: 'http://mirrors.ocf.berkeley.edu/qt/'
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
        aqtversion: '==0.9.4'
#        py7zrversion: '==0.9.0'
    - if: contains( matrix.os, 'windows') && ( matrix.qt-version == '5.15.2' )
      name: Install Qt 5.15.2 on Windows
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.qt-version }}
        arch: win64_mingw81
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
    - if: contains( matrix.os, 'windows') && ( matrix.qt-version != '5.7' ) && ( matrix.qt-version != '5.15.2' )
      name: Install Qt on Windows
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.qt-version }}
        arch: win64_mingw73
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
    - if: false == contains( matrix.os, 'windows') && !startsWith( matrix.qt-version, '6.' )
      name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.qt-version }}
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
    - if: false == contains( matrix.os, 'windows') && startsWith( matrix.qt-version, '6.' )
      name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.qt-version }}
        cached: ${{ steps.cache-qt.outputs.cache-hit }}

      #
      # Install enchant-2
      #
      
    - uses: actions/checkout@v2
      with: { submodules: true }
    - name: Install dependencies
      run: sudo apt-get -y install libglib2.0-dev libaspell-dev hspell libhunspell-dev libvoikko-dev voikko-fi aspell-en libunittest++-dev hunspell-fr
    - name: Install nuspell
      run: |
        sudo apt-get -y install libicu-dev ninja-build
        wget https://github.com/nuspell/nuspell/archive/refs/tags/v5.1.0.tar.gz -O - | tar -xz
        cmake -S nuspell-* -B nuspell-build -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=0
        cmake --build nuspell-build
        sudo cmake --install nuspell-build
        rm -rf nuspell-*
    - name: Bootstrap (gnulib and autoreconf)
      run: ./bootstrap
    - name: configure
      run: ./configure --enable-relocatable
      env:
        CFLAGS: -g ${{ env.ASAN_FLAGS }}
        CXXFLAGS: -g ${{ env.ASAN_FLAGS }}
        LDFLAGS: ${{ env.ASAN_FLAGS }}
    - name: make
      run: make --jobs=`nproc`
    - name: make check
      run: make check --jobs=`nproc`
    - name: make distcheck
      # normal build is with ASAN, distcheck is without ASAN. Both are covered.
      run: make distcheck --jobs=`nproc`

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
      with: { submodules: true }
    - name: Install dependencies
      run: |
        brew tap nuspell/nuspell
        brew install automake dbus-glib hspell hunspell libvoikko unittest-cpp nuspell coreutils
    - name: Bootstrap (gnulib and autoreconf)
      run: PATH="$(brew --prefix)/opt/m4/bin:${PATH}" ./bootstrap
    - name: configure
      # Note: aspell should work on macOS, but has been removed because one of
      # the tests fails; see https://github.com/GNUAspell/aspell/issues/555
      run: ./configure --enable-relocatable --without-aspell
    - name: make
      run: make --jobs=`nproc`
    - name: make check
      run: make check --jobs=`nproc`
    - name: make distcheck
      run: make distcheck --jobs=`nproc` DISTCHECK_CONFIGURE_FLAGS="--without-aspell"
      
  build-windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    strategy:
      matrix:
        include:
        - { sys: mingw64, env: x86_64 }
        - { sys: mingw32, env: i686 }
    steps:
    - uses: msys2/setup-msys2@v2
      with:
        release: false
        msystem: ${{matrix.sys}}
        install: >-
          patch git
          mingw-w64-${{matrix.env}}-autotools
          mingw-w64-${{matrix.env}}-gcc
          mingw-w64-${{matrix.env}}-glib2
          mingw-w64-${{matrix.env}}-hunspell
          mingw-w64-${{matrix.env}}-hunspell-en
          mingw-w64-${{matrix.env}}-nuspell
          mingw-w64-${{matrix.env}}-unittest-cpp
    - uses: actions/checkout@v2
      with: { submodules: true }
    - name: Bootstrap (gnulib and autoreconf)
      run: ./bootstrap
    - name: configure
      run: ./configure --enable-relocatable
    - name: make
      run: make --jobs=`nproc`
    - name: make check
      run: make check --jobs=`nproc`
    - name: make distcheck
      run: make distcheck --jobs=`nproc`  

      #
      # Clone dependencys
      #
      
    - name: Clone MarkdownEdit's dependencys
      run: |
        git submodule update --init --recursive -j 4
      

      #
      # Build MarkdownEdit
      #

    - name: Build MarkdownEdit
      run: |
        mkdir build && cd build
        qmake ..
        make
